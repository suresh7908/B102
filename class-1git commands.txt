

Create a folder in desktop -> open the folder -> right click inside the folder and click on git bash


1) git init   (git initilize (start the git in the folder) (once) 

2) git config --global user.name "akshat"                (it will set the name as akshat in software to identify who is working)  (once throughout)

3) git config --global user.email "akshat@gmail.com"     (it will set the email as akshat@gmail.com in software to identify who is working)(once)

4) git config --list   (to see the configuration of your git) 

5) touch file1   (creates an empty file in folder)

6) touch file2 (creates an empty file in folder)

7) git status   (will show the status of the files in my folder)

8) git add .    (put the files in the staging area)

9) git status 

10) git commit -m"commit message"    (put file from staging area to local repo )

11) cat >>file1     (updating the file1)
hello akshat  

to exit press ctrl + D

12) git status

13) git add .

14) git commit -m "commit message1"

15) git status

16) git log    (gives all the commit messages (versions) in detail)

17) git log --oneline  (give all the commit messages in oneline)

18) git log --oneline --graph --all    (give all the commit messages in graph format)

################################## Removing the changes which happened in last commit #####################



19) git log --oneline   (copy the last commit id)

20) git revert <<commit id>>


panel will open press i

add some content 

press esc and :wq  (save and exit)


21) cat file1

you will see that hello akshat is deleted and again it is a blank file

################################################################################################################

################### IGNORE SINGLE  FILE ########################################


22) touch .gitignore      (this is the file where you would be putting the files which you want to ignore)

23) touch users.log   

24) cat >>.gitignore
users.log            

press ctrl + D to exit 

25) git add .gitignore    (putting the .gitignore into the staging area)

26) git commit -m"created .gitignore file"

27) cat >>users.log
akshat logged in

press ctrl + D to exit

28) git status    (you will see that users.log is not been tracked because we have ignored it)

####################################################################################


######################IGNORE MULTIPLE FILES#############################

29) cat > .gitignore
*.log

press ctrl + D to exit

30) touch james.log edureka.log

31) git status    (you will see that james.log and edureka.log is not tracked )


######################################################################################



##########################  GITHUB.COM ###############################################



32) Create a github account

33) go to settings -> developer setting https://github.com/settings/apps -> personal access token -> create a new token with repo (tick mark)

33.1) create a new repo 

34) copy the personal access token and keep somewhere safe

35) git remote add origin <<central git url>>    (it will add central git repo url (created above) as a origin)

36) git push -u origin master  

37) a pop up will come where select token and paste the token there

38) now if you go to github.com -> repo (created in 33.1) you will see all the files are now copied there as well


#######################################################################################################

##################### SEE THE DIFFERENCE IN THE CHANGES MADE IN FILES AFTER IT IS PUT IN THE STAGING AREA########


39) touch file9

40) git add .

41) cat >file9
hello world

42) git diff     (you will see that hello world was added up)


#####################################################################################################################

###########################SEE THE DIFFERENCE IN THE CHANGES MADE IN FILES AFTER IT IS COMMITED (CHANGES BETWEEN FILES IN STAGING ARE AND LOCAL REPO)##


43) git commit -m "file9 blank created above is put in local repo"

44) git add .    (put the updated file9 in staging area)

45) git diff --staged file9  (this will give the difference in the content of the files which is there in my local repo and staging area)

###################################################################################################################################

######################IF GITHUB IS UPDATED AND NOT GIT) #################################USE OF PULL COMMAND ######################

46) go to github.com -> go to your repo -> select any file -> edit the file -> commit it

47) touch file10       (use this in git bash in your laptop) 

48) git add .

49) git commit -m"created file 10"

50) git push -u origin master  (you will get an error saying there is some update in github for that we need to first update our local repo)

51) git pull      (this will pull the files from the github repo and update your local repo )

52) git push -u   (your github would also be updated with this command . now commit you can see the commited messages in sno 49) 


###############################################################################################################################




########################## WORKING WITH BRANCHES #################################################################


53) git branch branch1    (it will create a branch with name branch1)

54) git branch    (it will give you the list of the branches and * means the current branch)

55) git checkout branch1   (this command will move you to the branch1 from master)

56) touch fileinbranch1 

57) git add . 

58) git commit -m "my first commit in branch1"

59) git checkout master    (come to master branch)

60) touch fileinmaster 

61) ls     (you will not see fileinbranch1 because it was created in branch1 and not in master)

62) git add .

63) git commit -m"created fileinmaster"

64) git checkout branch1

65) ls     (here you will not see fileinmaster because it was created after branch1 was created and created in master  branch)

(but you will see fileinbranch1) 

66) git checkout master

67) git merge branch1     (now your branch1 would be merged with master)

68) ls    (you will see fileinmaster and fileinbranch1)

###########################################RESOLVING THE CONFLICT ERROR (IN CASE WE CREATE SAME FILE IN BRANCH AND MASTER)######






























































































